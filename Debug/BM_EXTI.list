
BM_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007c1  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a8  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00001e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000605  00000000  00000000  00011d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054831  00000000  00000000  0001236a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066b9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  00066be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00066cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d4 	.word	0x080003d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d4 	.word	0x080003d4

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	@ (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	@ (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <EXTI0_IRQHandler>:

/*
 * EXTI0 external interrupt handler
 */
void EXTI0_IRQHandler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	// Do stuff
	GPIOC->ODR ^= (1 << 13);
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <EXTI0_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4a05      	ldr	r2, [pc, #20]	@ (800021c <EXTI0_IRQHandler+0x20>)
 8000206:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800020a:	60d3      	str	r3, [r2, #12]
	// Clear pending
	EXTI->PR = (1 << 0);
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <EXTI0_IRQHandler+0x24>)
 800020e:	2201      	movs	r2, #1
 8000210:	615a      	str	r2, [r3, #20]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40011000 	.word	0x40011000
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI1_IRQHandler>:

/*
 * EXTI1 external interrupt handler
 */
void EXTI1_IRQHandler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	// Do stuff
	GPIOC->ODR ^= (1 << 13);
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <EXTI1_IRQHandler+0x20>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <EXTI1_IRQHandler+0x20>)
 800022e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000232:	60d3      	str	r3, [r2, #12]
	// Clear pending
	EXTI->PR = (1 << 1);
 8000234:	4b04      	ldr	r3, [pc, #16]	@ (8000248 <EXTI1_IRQHandler+0x24>)
 8000236:	2202      	movs	r2, #2
 8000238:	615a      	str	r2, [r3, #20]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40011000 	.word	0x40011000
 8000248:	40010400 	.word	0x40010400

0800024c <main>:

int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	// Set Bit 3 to enable GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 8000250:	4b34      	ldr	r3, [pc, #208]	@ (8000324 <main+0xd8>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a33      	ldr	r2, [pc, #204]	@ (8000324 <main+0xd8>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
	// Set Bit 4 to enable GPIOC clock
	RCC->APB2ENR |= (1 << 4);
 800025c:	4b31      	ldr	r3, [pc, #196]	@ (8000324 <main+0xd8>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a30      	ldr	r2, [pc, #192]	@ (8000324 <main+0xd8>)
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	6193      	str	r3, [r2, #24]

	// Make GPIOB Pin0 and Pin1 input
	GPIOB->CRL &= 0xFFFFFF00;
 8000268:	4b2f      	ldr	r3, [pc, #188]	@ (8000328 <main+0xdc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a2e      	ldr	r2, [pc, #184]	@ (8000328 <main+0xdc>)
 800026e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000272:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00000088;
 8000274:	4b2c      	ldr	r3, [pc, #176]	@ (8000328 <main+0xdc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2b      	ldr	r2, [pc, #172]	@ (8000328 <main+0xdc>)
 800027a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800027e:	6013      	str	r3, [r2, #0]
	//Enable GPIO Pin0 and Pin1 pull-up
	GPIOB->ODR = 0x00000003;
 8000280:	4b29      	ldr	r3, [pc, #164]	@ (8000328 <main+0xdc>)
 8000282:	2203      	movs	r2, #3
 8000284:	60da      	str	r2, [r3, #12]

	// Make GPIOE Pin13 output
	GPIOC->CRH &= 0xFF0FFFFF;
 8000286:	4b29      	ldr	r3, [pc, #164]	@ (800032c <main+0xe0>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4a28      	ldr	r2, [pc, #160]	@ (800032c <main+0xe0>)
 800028c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000290:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x00200000;
 8000292:	4b26      	ldr	r3, [pc, #152]	@ (800032c <main+0xe0>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	4a25      	ldr	r2, [pc, #148]	@ (800032c <main+0xe0>)
 8000298:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800029c:	6053      	str	r3, [r2, #4]

	// Reset GPIOC Pin13
	GPIOC->ODR &= ~(1 << 13);
 800029e:	4b23      	ldr	r3, [pc, #140]	@ (800032c <main+0xe0>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a22      	ldr	r2, [pc, #136]	@ (800032c <main+0xe0>)
 80002a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002a8:	60d3      	str	r3, [r2, #12]

	// Since we will use Alternate Function (EXTI) we need to enable the
	//   clock for that module. Bit0 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 0); // AFIO Clock enable
 80002aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000324 <main+0xd8>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000324 <main+0xd8>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6193      	str	r3, [r2, #24]
	// EXTI0 can be configured for each GPIO module.
	//   EXTICR1: 0b XXXX XXXX XXXX 0001
	//               pin3 pin2 pin1 pin0
	//
	//   Writing a 0b0001 to pin0 location ties PB0 to EXT0
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI0_PB; // Tie PB0 to EXTI0
 80002b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <main+0xe4>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000330 <main+0xe4>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6093      	str	r3, [r2, #8]
	// EXTI1 can be configured for each GPIO module.
	//   EXTICR1: 0b XXXX XXXX 0001 XXXX
	//               pin3 pin2 pin1 pin0
	//
	//   Writing a 0b0001 to pin1 location ties PB1 to EXT1
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI1_PB; // Tie PB1 to EXTI1
 80002c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <main+0xe4>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000330 <main+0xe4>)
 80002c8:	f043 0310 	orr.w	r3, r3, #16
 80002cc:	6093      	str	r3, [r2, #8]

	// Next we choose either falling edge trigger (FTSR) or falling edge trigger (FTSR)
	//EXTI->FTSR |= 0x00001;   // Enable falling edge trigger on EXTI0

	EXTI->RTSR |= 0x00002;   // Enable falling edge trigger on EXTI0
 80002ce:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <main+0xe8>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a18      	ldr	r2, [pc, #96]	@ (8000334 <main+0xe8>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6093      	str	r3, [r2, #8]

	EXTI->FTSR |= 0x00001;   // Enable falling edge trigger on EXTI1
 80002da:	4b16      	ldr	r3, [pc, #88]	@ (8000334 <main+0xe8>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	4a15      	ldr	r2, [pc, #84]	@ (8000334 <main+0xe8>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	60d3      	str	r3, [r2, #12]

	// We mask the used external interrupt numbers.
	EXTI->IMR |= 0x00001;    // Mask EXTI0
 80002e6:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <main+0xe8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <main+0xe8>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= 0x00002;    // Mask EXTI1
 80002f2:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <main+0xe8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000334 <main+0xe8>)
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	6013      	str	r3, [r2, #0]

	// Set Prioirity for each interrupt request
	// STM32F103 supports 4-bit priority level (highest 4-bits are implemented)
	NVIC_SetPriority(EXTI0_IRQn,0x10); // Priority level 1
 80002fe:	2110      	movs	r1, #16
 8000300:	2006      	movs	r0, #6
 8000302:	f7ff ff51 	bl	80001a8 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI1_IRQn,0x20); // Priority level 2
 8000306:	2120      	movs	r1, #32
 8000308:	2007      	movs	r0, #7
 800030a:	f7ff ff4d 	bl	80001a8 <__NVIC_SetPriority>

	// Enable EXTI0 interrupt on NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
 800030e:	2006      	movs	r0, #6
 8000310:	f7ff ff2e 	bl	8000170 <__NVIC_EnableIRQ>
	// Enable EXTI1 interrupt on NVIC
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000314:	2007      	movs	r0, #7
 8000316:	f7ff ff2b 	bl	8000170 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800031a:	b662      	cpsie	i
}
 800031c:	bf00      	nop

	__enable_irq();	//NECESSARY IN THIS CODE??? - WHY ???

	while(1)
 800031e:	bf00      	nop
 8000320:	e7fd      	b.n	800031e <main+0xd2>
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40011000 	.word	0x40011000
 8000330:	40010000 	.word	0x40010000
 8000334:	40010400 	.word	0x40010400

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	@ (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	@ (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	@ (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ff6f 	bl	800024c <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	2600      	movs	r6, #0
 8000390:	4d0c      	ldr	r5, [pc, #48]	@ (80003c4 <__libc_init_array+0x38>)
 8000392:	4c0d      	ldr	r4, [pc, #52]	@ (80003c8 <__libc_init_array+0x3c>)
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	f000 f81a 	bl	80003d4 <_init>
 80003a0:	2600      	movs	r6, #0
 80003a2:	4d0a      	ldr	r5, [pc, #40]	@ (80003cc <__libc_init_array+0x40>)
 80003a4:	4c0a      	ldr	r4, [pc, #40]	@ (80003d0 <__libc_init_array+0x44>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
