
atv micro 1  enxuto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  08000354  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00001354  2**0
                  CONTENTS
  4 .ARM          00000000  0800034c  0800034c  00001354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800034c  08000354  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0000134c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000350  08000350  00001350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000354  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000354  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001df  00000000  00000000  0000137d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c9  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff5a  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000584  00000000  00000000  000115f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005456b  00000000  00000000  00011b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000660e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  0006612c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00066180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000334 	.word	0x08000334

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000334 	.word	0x08000334

08000170 <main>:
#define GPIO_PIN_11                ((uint16_t)0x0800)  /* Pin 11 selected   */

#define GPIO_PIN_13                ((uint16_t)0x2000)  /* Pin 13 selected   */

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSEON;
 8000174:	4b44      	ldr	r3, [pc, #272]	@ (8000288 <main+0x118>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a43      	ldr	r2, [pc, #268]	@ (8000288 <main+0x118>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800017e:	6013      	str	r3, [r2, #0]
	// Set Bit 3 to enable GPIOB clock
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 8000180:	4b41      	ldr	r3, [pc, #260]	@ (8000288 <main+0x118>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a40      	ldr	r2, [pc, #256]	@ (8000288 <main+0x118>)
 8000186:	f043 031c 	orr.w	r3, r3, #28
 800018a:	6193      	str	r3, [r2, #24]

	// Make GPIOB Pin5,6,7 output
    // Configuração de PA5, PA6, PA7 como saída push-pull
    GPIOA->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_CNF5 | GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 800018c:	4b3f      	ldr	r3, [pc, #252]	@ (800028c <main+0x11c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a3e      	ldr	r2, [pc, #248]	@ (800028c <main+0x11c>)
 8000192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000196:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_MODE5_1 | GPIO_CRL_MODE6_1 | GPIO_CRL_MODE7_1);  // Output de até 2 MHz
 8000198:	4b3c      	ldr	r3, [pc, #240]	@ (800028c <main+0x11c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a3b      	ldr	r2, [pc, #236]	@ (800028c <main+0x11c>)
 800019e:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80001a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001a6:	6013      	str	r3, [r2, #0]

	// Make GPIOC Pin10,11 input
    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 80001a8:	4b38      	ldr	r3, [pc, #224]	@ (800028c <main+0x11c>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a37      	ldr	r2, [pc, #220]	@ (800028c <main+0x11c>)
 80001ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80001b2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (GPIO_CRH_CNF10_1 | GPIO_CRH_CNF11_1);
 80001b4:	4b35      	ldr	r3, [pc, #212]	@ (800028c <main+0x11c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a34      	ldr	r2, [pc, #208]	@ (800028c <main+0x11c>)
 80001ba:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 80001be:	6053      	str	r3, [r2, #4]

	// Make GPIOB Pin4 input
    GPIOB->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
 80001c0:	4b33      	ldr	r3, [pc, #204]	@ (8000290 <main+0x120>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a32      	ldr	r2, [pc, #200]	@ (8000290 <main+0x120>)
 80001c6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80001ca:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF4_1;
 80001cc:	4b30      	ldr	r3, [pc, #192]	@ (8000290 <main+0x120>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000290 <main+0x120>)
 80001d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001d6:	6013      	str	r3, [r2, #0]

	// Make GPIOC Pin13 output
	GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
 80001d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <main+0x124>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000294 <main+0x124>)
 80001de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001e2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE13_1;
 80001e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000294 <main+0x124>)
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000294 <main+0x124>)
 80001ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ee:	6053      	str	r3, [r2, #4]

	// Reset GPIOC Pin13
	GPIOC->ODR &= ~(1 << 13);
 80001f0:	4b28      	ldr	r3, [pc, #160]	@ (8000294 <main+0x124>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	4a27      	ldr	r2, [pc, #156]	@ (8000294 <main+0x124>)
 80001f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80001fa:	60d3      	str	r3, [r2, #12]

	// Reset GPIOA Pin5,6,7
	GPIOB->ODR &= ~((1 << 5)|(1 << 6)|(1 << 7));
 80001fc:	4b24      	ldr	r3, [pc, #144]	@ (8000290 <main+0x120>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	4a23      	ldr	r2, [pc, #140]	@ (8000290 <main+0x120>)
 8000202:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8000206:	60d3      	str	r3, [r2, #12]

	GPIOC->ODR |= GPIO_PIN_13;
 8000208:	4b22      	ldr	r3, [pc, #136]	@ (8000294 <main+0x124>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	4a21      	ldr	r2, [pc, #132]	@ (8000294 <main+0x124>)
 800020e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000212:	60d3      	str	r3, [r2, #12]


	while(1){

		if((GPIOB->IDR & GPIO_PIN_4) != 0){
 8000214:	4b1e      	ldr	r3, [pc, #120]	@ (8000290 <main+0x120>)
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	f003 0310 	and.w	r3, r3, #16
 800021c:	2b00      	cmp	r3, #0
 800021e:	d006      	beq.n	800022e <main+0xbe>
			GPIOA->ODR |= GPIO_PIN_7;
 8000220:	4b1a      	ldr	r3, [pc, #104]	@ (800028c <main+0x11c>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	4a19      	ldr	r2, [pc, #100]	@ (800028c <main+0x11c>)
 8000226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800022a:	60d3      	str	r3, [r2, #12]
 800022c:	e005      	b.n	800023a <main+0xca>
		}
		else{
			GPIOA->ODR &= ~GPIO_PIN_7;
 800022e:	4b17      	ldr	r3, [pc, #92]	@ (800028c <main+0x11c>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a16      	ldr	r2, [pc, #88]	@ (800028c <main+0x11c>)
 8000234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000238:	60d3      	str	r3, [r2, #12]
		}

		if ((GPIOA->IDR & GPIO_PIN_10) != 0) {
 800023a:	4b14      	ldr	r3, [pc, #80]	@ (800028c <main+0x11c>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000242:	2b00      	cmp	r3, #0
 8000244:	d006      	beq.n	8000254 <main+0xe4>
			GPIOA->ODR |= GPIO_PIN_5;
 8000246:	4b11      	ldr	r3, [pc, #68]	@ (800028c <main+0x11c>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	4a10      	ldr	r2, [pc, #64]	@ (800028c <main+0x11c>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	60d3      	str	r3, [r2, #12]
 8000252:	e005      	b.n	8000260 <main+0xf0>
		} else {
			GPIOA->ODR &= ~GPIO_PIN_5;
 8000254:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <main+0x11c>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a0c      	ldr	r2, [pc, #48]	@ (800028c <main+0x11c>)
 800025a:	f023 0320 	bic.w	r3, r3, #32
 800025e:	60d3      	str	r3, [r2, #12]
		        }

		if ((GPIOA->IDR & GPIO_PIN_11) != 0) {
 8000260:	4b0a      	ldr	r3, [pc, #40]	@ (800028c <main+0x11c>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000268:	2b00      	cmp	r3, #0
 800026a:	d006      	beq.n	800027a <main+0x10a>
			GPIOA->ODR |= GPIO_PIN_6;
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <main+0x11c>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a06      	ldr	r2, [pc, #24]	@ (800028c <main+0x11c>)
 8000272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000276:	60d3      	str	r3, [r2, #12]
 8000278:	e7cc      	b.n	8000214 <main+0xa4>
		} else {
			GPIOA->ODR &= ~GPIO_PIN_6;
 800027a:	4b04      	ldr	r3, [pc, #16]	@ (800028c <main+0x11c>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a03      	ldr	r2, [pc, #12]	@ (800028c <main+0x11c>)
 8000280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000284:	60d3      	str	r3, [r2, #12]
		if((GPIOB->IDR & GPIO_PIN_4) != 0){
 8000286:	e7c5      	b.n	8000214 <main+0xa4>
 8000288:	40021000 	.word	0x40021000
 800028c:	40010800 	.word	0x40010800
 8000290:	40010c00 	.word	0x40010c00
 8000294:	40011000 	.word	0x40011000

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	@ (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	@ (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	@ (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f811 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ff51 	bl	8000170 <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>
	...

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	2600      	movs	r6, #0
 80002f0:	4d0c      	ldr	r5, [pc, #48]	@ (8000324 <__libc_init_array+0x38>)
 80002f2:	4c0d      	ldr	r4, [pc, #52]	@ (8000328 <__libc_init_array+0x3c>)
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	10a4      	asrs	r4, r4, #2
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	f000 f81a 	bl	8000334 <_init>
 8000300:	2600      	movs	r6, #0
 8000302:	4d0a      	ldr	r5, [pc, #40]	@ (800032c <__libc_init_array+0x40>)
 8000304:	4c0a      	ldr	r4, [pc, #40]	@ (8000330 <__libc_init_array+0x44>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
